generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String?  @unique
  name      String?
  phone     String?  @unique
  studentId String?
  userRole  RoleType @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  canteens        Canteen[]
  Customer        Customer?
  DeliveryProfile DeliveryProfile?

  // relations with Order
  ordersPlaced Order[] @relation("CustomerOrders") // user as customer
  deliveries   Order[] @relation("OrderDeliveryMan") // user as delivery person
}

enum RoleType {
  CANTEEN_OWNER
  CUSTOMER
  DELIVERY_PERSON
  ADMIN
  DEFAULT
}

enum CanteenName {
  Khans_Kitchen
  Olympia_Cafe
  Neptune_Cafe
}

model Canteen {
  id            String      @id
  name          CanteenName
  canteen_image String?
  ownerId       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  owner       User             @relation(fields: [ownerId], references: [id])
  reviews     CanteenReviews[]
  CanteenFood CanteenFood[]

  orders Order[]
}

enum FoodCategory {
  POPULAR
  BREAKFAST
  LUNCH
  DINNER
  FAST_FOOD
  DESSERT
  BEVERAGE
  SNACK
  RICE_ITEMS
  DRINKS
  PACKET_ITEMS
  OTHERS
  MEAT_ITEMS
}

model CanteenFood {
  id           String   @id @default(cuid())
  canteenId    String
  name         String
  price        Float
  image        String?
  rating       Float
  description  String?
  availability Boolean  @default(true)
  stocks       Int      @default(10)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category      FoodCategory[]
  canteen       Canteen         @relation(fields: [canteenId], references: [id])
  featuredItems FeaturedItems[]
}

model CanteenReviews {
  canteenId String   @id
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  canteen Canteen @relation(fields: [canteenId], references: [id])
}

model Customer {
  id        String   @id
  userId    String   @unique
  uiuId     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model FeaturedItems {
  id          String      @id @default(cuid())
  bannerImage String?
  isFeatured  Boolean     @default(false)
  foodId      String
  food        CanteenFood @relation(fields: [foodId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

model DeliveryProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  isAvailable Boolean @default(false) // delivery ON/OFF button
  rating      Float? // avg rating from deliveries
  completed   Int     @default(0)
  cancelled   Int     @default(0)

  user      User               @relation(fields: [userId], references: [id])
  timeSlots DeliveryTimeSlot[]
}

model DeliveryTimeSlot {
  id         String   @id @default(cuid())
  deliveryId String
  dayOfWeek  WeekDay
  startTime  DateTime
  endTime    DateTime

  delivery DeliveryProfile @relation(fields: [deliveryId], references: [id])
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  canteenId  String
  foodItems  Json
  status     OrderStatus @default(PENDING)
  totalPrice Float
  assignedTo String?
  deliveryAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer    User    @relation("CustomerOrders", fields: [customerId], references: [id])
  canteen     Canteen @relation(fields: [canteenId], references: [id])
  deliveryMan User?   @relation("OrderDeliveryMan", fields: [assignedTo], references: [id])
}
