generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  CANTEEN_OWNER
  CUSTOMER
  DELIVERY_PERSON
  ADMIN
  DEFAULT
}

model User {

  id        String  @id // Clerk user.id
  email     String? @unique
  name      String?
  phone     String? @unique
  studentId String? // University ID if needed
  userRole  RoleType @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



























//
// ENUMS
//
// enum RoleType {
//   CANTEEN_ADMIN
//   CUSTOMER
//   DELIVERY
// }

// // enum OrderStatus {
// //   PENDING
// //   CONFIRMED
// //   PREPARING
// //   READY_FOR_PICKUP
// //   ASSIGNED
// //   PICKED_UP
// //   IN_TRANSIT
// //   DELIVERED
// //   CANCELLED
// //   REFUNDED
// // }

// // enum PaymentStatus {
// //   UNPAID
// //   PAID
// //   REFUNDED
// //   FAILED
// // }

// // enum PaymentMethod {
// //   CASH
// //   BKASH
// //   NAGAD
// //   CARD
// // }

// // enum OptionSelectType {
// //   SINGLE
// //   MULTIPLE
// // }

// // enum DeliveryStatus {
// //   PENDING
// //   ACCEPTED
// //   REJECTED
// //   PICKED_UP
// //   IN_TRANSIT
// //   DELIVERED
// //   CANCELLED
// // }

// // enum VehicleType {
// //   FOOT
// //   BICYCLE
// //   MOTORBIKE
// // }

// //
// // MODELS
// //

// model User {
//   id        String  @id // Clerk user.id
//   email     String? @unique
//   name      String?
//   phone     String? @unique
//   studentId String? // University ID if needed

//   roles       UserRole[]
//   student     StudentProfile?
//   addresses   Address[]
//   orders      Order[]              @relation("CustomerOrders")
//   deliveries  DeliveryAssignment[] @relation("DeliveryAssignments")
//   favorites   Favorite[]
//   itemReviews ItemReview[]
//   shopReviews ShopReview[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Role {
//   id    Int        @id @default(autoincrement())
//   type  RoleType   @unique
//   users UserRole[]
// }

// model UserRole {
//   userId String
//   roleId Int

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

//   @@id([userId, roleId])
//   @@index([roleId])
// }

// model StudentProfile {
//   userId              String       @id
//   isDeliveryEnabled   Boolean      @default(false)
//   vehicle             VehicleType?
//   completedDeliveries Int          @default(0)
//   rating              Decimal      @default(0.00) @db.Decimal // avg 0â€“5

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Shop {
//   id       String  @id @default(cuid())
//   name     String  @unique
//   code     String  @unique // olympia | neptune | khans
//   isOpen   Boolean @default(true)
//   phone    String?
//   location String?

//   categories Category[]
//   items      Item[]
//   orders     Order[]
//   reviews    ShopReview[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Category {
//   id        String @id @default(cuid())
//   name      String
//   sortOrder Int    @default(0)

//   shopId String
//   shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

//   items Item[]

//   @@unique([shopId, name])
//   @@index([shopId, sortOrder])
// }

// model Item {
//   id          String  @id @default(cuid())
//   name        String
//   description String?
//   imageUrl    String?
//   basePrice   Decimal @db.Decimal
//   isAvailable Boolean @default(true)
//   sku         String? @unique
//   salesCount  Int     @default(0)
//   popularity  Int     @default(0)
//   sortOrder   Int     @default(0)

//   shopId String
//   shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

//   categoryId String?
//   category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

//   optionGroups ItemOptionGroup[]
//   orderItems   OrderItem[]
//   reviews      ItemReview[]
//   favorites    Favorite[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([shopId, isAvailable, basePrice])
//   @@index([categoryId, sortOrder])
//   @@index([name])
// }

// model ItemOptionGroup {
//   id         String           @id @default(cuid())
//   name       String
//   type       OptionSelectType @default(SINGLE)
//   minSelect  Int              @default(0)
//   maxSelect  Int              @default(1)
//   isRequired Boolean          @default(false)
//   sortOrder  Int              @default(0)

//   itemId String
//   item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

//   options ItemOption[]

//   @@unique([itemId, name])
//   @@index([itemId, sortOrder])
// }

// model ItemOption {
//   id          String  @id @default(cuid())
//   name        String
//   priceDelta  Decimal @default(0.00) @db.Decimal
//   isAvailable Boolean @default(true)
//   sortOrder   Int     @default(0)

//   groupId String
//   group   ItemOptionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

//   orderOptions OrderItemOption[]

//   @@unique([groupId, name])
//   @@index([groupId, sortOrder])
// }

// model Order {
//   id        String      @id @default(cuid())
//   orderCode String      @unique
//   status    OrderStatus @default(PENDING)

//   customerId String
//   customer   User   @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade)

//   shopId String
//   shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Restrict)

//   deliveryId String?
//   delivery   DeliveryAssignment?

//   deliveryAddressId String?
//   deliveryAddress   Address? @relation("DeliveryAddressOrders", fields: [deliveryAddressId], references: [id], onDelete: SetNull)

//   notes String?

//   subTotal      Decimal @db.Decimal
//   discountTotal Decimal @default(0.00) @db.Decimal
//   deliveryFee   Decimal @default(0.00) @db.Decimal
//   total         Decimal @db.Decimal

//   paymentMethod PaymentMethod @default(CASH)
//   paymentStatus PaymentStatus @default(UNPAID)

//   items       OrderItem[]
//   payments    Payment[]
//   itemReviews ItemReview[]

//   placedAt    DateTime  @default(now())
//   confirmedAt DateTime?
//   preparedAt  DateTime?
//   readyAt     DateTime?
//   pickedUpAt  DateTime?
//   deliveredAt DateTime?
//   cancelledAt DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([shopId, status, createdAt])
//   @@index([customerId, createdAt])
// }

// model OrderItem {
//   id String @id @default(cuid())

//   orderId String
//   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   itemId String?
//   item   Item?   @relation(fields: [itemId], references: [id], onDelete: SetNull)

//   nameSnapshot  String
//   imageSnapshot String?
//   unitPrice     Decimal @db.Decimal
//   quantity      Int     @default(1)
//   lineTotal     Decimal @db.Decimal

//   selectedOptions OrderItemOption[]

//   @@index([orderId])
// }

// model OrderItemOption {
//   id String @id @default(cuid())

//   orderItemId String
//   orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

//   optionId String?
//   option   ItemOption? @relation(fields: [optionId], references: [id], onDelete: SetNull)

//   nameSnapshot   String
//   priceDeltaSnap Decimal @default(0.00) @db.Decimal

//   @@index([orderItemId])
// }

// model DeliveryAssignment {
//   id String @id @default(cuid())

//   orderId String @unique
//   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   deliveryUserId String
//   deliveryUser   User   @relation("DeliveryAssignments", fields: [deliveryUserId], references: [id], onDelete: Cascade)

//   status      DeliveryStatus @default(PENDING)
//   assignedAt  DateTime       @default(now())
//   acceptedAt  DateTime?
//   pickedUpAt  DateTime?
//   deliveredAt DateTime?
//   cancelledAt DateTime?

//   lastLat Decimal? @db.Decimal
//   lastLng Decimal? @db.Decimal

//   @@index([deliveryUserId, status])
// }

// model Address {
//   id       String   @id @default(cuid())
//   label    String?
//   line1    String?
//   line2    String?
//   building String?
//   room     String?
//   notes    String?
//   lat      Decimal? @db.Decimal
//   lng      Decimal? @db.Decimal

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   orders Order[] @relation("DeliveryAddressOrders")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

// model Payment {
//   id String @id @default(cuid())

//   orderId String
//   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   method      PaymentMethod
//   status      PaymentStatus @default(UNPAID)
//   providerRef String?
//   amount      Decimal       @db.Decimal
//   paidAt      DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([orderId, status])
// }

// model Favorite {
//   userId String
//   itemId String

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

//   @@id([userId, itemId])
//   @@index([itemId])
// }

// model ItemReview {
//   id      String  @id @default(cuid())
//   rating  Int
//   comment String?

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   itemId String
//   item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

//   orderId String?
//   order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

//   createdAt DateTime @default(now())

//   @@index([itemId, rating, createdAt])
//   @@index([userId])
// }

// model ShopReview {
//   id      String  @id @default(cuid())
//   rating  Int
//   comment String?

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   shopId String
//   shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())

//   @@index([shopId, rating, createdAt])
//   @@index([userId])
// }
